package main;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.Vector;

public class procesor {
	/**
	 * Procesor registers
	 */
	private int ptr;
	private String mr;
	private int ip;
	private int cs;
	private int ds;
	private int sp;
	/*
	 * interrupts
	 */
	private int si;
	private int ti;
	private int ioi;
	private int pi;
	/*
	 * procesor mode
	 * mode = 1 processor running in supervisor mode
	 * mode = 0 processor running in user mode
	 */
	private int mode;
	
	private memory RAM = null;
	private channelMechanism channel = null;
	private pagination paginationMechanism = null;
	
	/**
	 * @param args
	 */
	Vector stekas=new Vector();
	private BufferedReader br;
	private BufferedReader br2;
	private boolean isFirstWord = true;
	private boolean isStart = false;
	private boolean isEnd = false;
	private int maxIP = 0;
	private String fileName = "C:\\Users\\KD\\Desktop\\new\\2013-02-17\\2013-02-17_13-50-37.txt";
	
	public procesor() {
		this.inicialize();
		try {
			
			br = new BufferedReader(new FileReader(fileName));
			LineNumberReader  lnr = new LineNumberReader(br);
			try {
				lnr.skip(Long.MAX_VALUE);
				this.maxIP = lnr.getLineNumber();
				this.br = new BufferedReader(new FileReader(fileName));
			} catch (IOException e) {
				System.out.println("Klaida gaunant max failo eiluciu skaiciu");
			}
		} catch (IOException e) {
			System.out.println("Failas nerastas");
		}
		this.setMode(0);
	}
	/**
	 * Inicializuojame visas pradiniu kintamuju reiksmes
	 */
	public void inicialize() {
		this.setCs(0000);
		this.setDs(0000);
		this.setIoi(0000);
		this.setIp(0000);
		this.setMode(0);
		this.setMr("0");
		this.setPi(0000);
		this.setPtr(0000);
		this.setSi(0000);
		this.setSp(0000);
		this.setTi(255);
		this.createMemory();
		channel = new channelMechanism();
		paginationMechanism = new pagination(this.getRAM());
	}
	
	public void createMemory() {
		this.RAM = new memory();
		this.RAM.inicializeMemory();
	}
	
	public void freeMemory(int memoryType, int block, int word, int bytee) {
		if (memoryType == 1){
			this.RAM.setSuperVisorMemory(block, word, bytee, null);
		}
		if (memoryType == 2) {
			this.RAM.setUserMemory(block, word, bytee, null);
		}
	}
	
	public int isCommand(String word) {
		
		int commandType = 0;
		switch (word) {
				/*
				 * 
				 */
	        case "ADDS":  commandType = 1;
                break;
	        case "SUBS":  commandType = 2;
            	break;
	        case "MULS":  commandType = 3;
            	break;
	        case "DIVS":  commandType = 4;
	        	break;
	        case "ADDR":  commandType = 5;
            	break;
	        case "SUBR":  commandType = 6;
        		break;
	        case "MULR":  commandType = 7;
            	break;
	        case "DIVR":  commandType = 8;
            	break;
		        /*
		         * 
		         */
	        case "PUSH":  commandType = 9;
            	break;
	        case "POP":  commandType = 10;
	        	break;
	        	/**
	        	 * 
	        	 */
	        case "CMPS":  commandType = 11;
            	break;
	        case "CMPR":  commandType = 12;
            	break;
            	/**
            	 * 
            	 */
	        case "JMP":  commandType = 13;
            	break;
            	/**
            	 * 
            	 */
	        case "READ":  commandType = 14;
	        			this.setIoi(4);
            	break;
	        case "PRINT":  commandType = 15;
	        			this.setIoi(3);
            	break;
	        case "LOAD":  commandType = 16;
	        			this.setIoi(1);
	        	break;
	        case "WRITE":  commandType = 17;
	        			this.setIoi(2);
            	break;
            	/**
            	 * 
            	 */
	        case "HALT":  commandType = 18;
        		break;
	        case "MOV":  commandType = 19;
        		break;
	        default: this.setPi(2);
                break;
	    }
		return commandType;
	}
	
	
	public int interrupting() {
		if (this.getIoi() > 0) {
			return 1;
		}
		else if (this.getSi() > 0) {
			return 2;
		}
		else if (this.getPi() > 0) {
			return 3;	
		}
		else if (this.getTi() == 0) {
			return 4;
		}
		else {
			return 0;
		}
		
	}
	/*
	 * Programa halt viska nunulina isveda i ekrana, jog programa baigta
	 */
	public void HALT() {
		this.br = null;
		this.isEnd = false;
		this.isFirstWord = true;
		this.isStart = false;
		this.channel.base(2, "Klaidingas programos start");
	}
	/**
	 * Programa nuskaito is klavieturos vedama teksta ir priskiria registrui
	 */
	public void READ() {
		String line = null;
		line = this.channel.base(1, "");
		this.mr = line;
	}
	
	/*
	 * funkcija kreipiasi i kanalu mechanizma ir isspauzdina nurodyta teksta
	 */
	public void PRINT(String value) {
		this.channel.base(2, value);
	}
	
	public void LOAD(){
		
	}
	
	public void WRITE() {
		
	}
	
	public void JMP(int poslinkis) {
		int newIP = this.getIp() + poslinkis;
		if (newIP > this.maxIP) {
			this.HALT();
			this.channel.base(2, "Pezengtas IP rezis");
		}
		else {
			this.setIp(newIP);
		}
	}
	
	public int CMPR(int value1, int value2) {
		if (value1 > value2) {
			return 1;
		}
		else if(value1 < value2) {
			return 2;
		}
		else {
			return 0;
		}
	}
	
	public void MOV(String reg1, String reg2) {
		if (reg1 == "MR" && reg2 == "DS") {
			this.setMr(Integer.toString(this.getDs()));
		}
		else if (reg1 == "MR" && reg2 == "CS") {
			this.setMr(Integer.toString(this.getCs()));
		}
		else if (reg1 == "MR" && reg2 == "IP") {
			this.setMr(Integer.toString(this.getIp()));
		}
		else if (reg1 == "MR" && reg2 == "SP") {
			this.setMr(Integer.toString(this.getSp()));
		}
		else if (reg1 == "DS" && reg2 == "MR") {
			this.setDs(Integer.parseInt(this.getMr()));
		}
		else if (reg1 == "DS" && reg2 == "CS") {
			this.setDs(this.getCs());
		}
		else if (reg1 == "DS" && reg2 == "IP") {
			this.setDs(this.getIp());
		}
		else if (reg1 == "DS" && reg2 == "SP") {
			this.setDs(this.getSp());
		}
		else if (reg1 == "CS" && reg2 == "MR") {
			this.setCs(Integer.parseInt(this.getMr()));
		}
		else if (reg1 == "CS" && reg2 == "DS") {
			this.setCs(this.getDs());
		}
		else if (reg1 == "CS" && reg2 == "IP") {
			this.setCs(this.getIp());
		}
		else if (reg1 == "CS" && reg2 == "SP") {
			this.setCs(this.getSp());
		}
		else if (reg1 == "IP" && reg2 == "MR") {
			this.setIp(Integer.parseInt(this.getMr()));
		}
		else if (reg1 == "IP" && reg2 == "DS") {
			this.setIp(this.getDs());
		}
		else if (reg1 == "IP" && reg2 == "SP") {
			this.setIp(this.getSp());
		}
		else if (reg1 == "IP" && reg2 == "CS") {
			this.setIp(this.getCs());
		}
		else if (reg1 == "SP" && reg2 == "MR") {
			this.setSp(Integer.parseInt(this.getMr()));
		}
		else if (reg1 == "SP" && reg2 == "DS") {
			this.setSp(this.getDs());
		}
		else if (reg1 == "SP" && reg2 == "CS") {
			this.setSp(this.getCs());
		}
		else if (reg1 == "SP" && reg2 == "IP") {
			this.setSp(this.getIp());
		}
		else if (reg1 == reg2) {
			
		}
		else {
			this.setPi(3);
		}
	}
	
	public void StepReading() {
		String sCurrentLine = null;
			if (br != null) {
				try {
					//if (this.getMode() == 0)
					sCurrentLine = this.br.readLine();
				} catch (IOException e) {
					System.out.println("Nepavyko nuskaityti failo");
				}
				System.out.println(sCurrentLine);
				String[] temp;
				temp = sCurrentLine.split("\\ ");
				if (this.isFirstWord) {
					if (this.isStart == false) {
						
						if (temp[0] == "$START") {
							//pirmas zodis butinai turi buti $start
							this.isStart = true;
						}
						else {
							//vykdom halt ir nutraukiam visus veiksmus
							this.HALT();
						}
						this.isFirstWord = false;
					}
				}
				if (this.isStart && this.isFirstWord == false) {
					int interrupt = this.interrupting();
					if (interrupt == 0) {
						//interruptu nera vykdom programa
						int komanda = this.isCommand(temp[0]);
						if (komanda != 0) {
							System.out.println(komanda);
						}
						else {
							
						}
					}
					else {
						//issaugome busena
						this.saveState();
						// tikrinam interruptus jungiam supervisor rezima
						
						if (interrupt == 1) { //IOI
							switch (this.getIoi()) {
							case 1: this.LOAD();
								break;
							case 2: this.WRITE();
								break;
							case 3: this.PRINT(this.getMr());
								break;
							case 4: this.READ();
								break;
							default: System.out.println("IOI apdorojimo klaida");
			                	break;
						}
						if (interrupt == 2) { //SI
							//nezinau ka daryti su SI, galbut tokio kaip SI nereikia
						}
						if (interrupt == 3) { //PI
							this.intPIValidation();
						}
						if (interrupt == 4) { //TI
							this.HALT();
						}
						//gryztame i buvusia busena ir toliau vykdome komandas
						this.returnState();
					}
					this.setTi(this.getTi() - 1);
				}	
				this.setIp(this.getIp() + 1);
			}
		}
	}
	
	public void intPIValidation() {
		int pi = this.getPi();
		if (pi == 1) {
			this.setMr("neteisingas adresas");
			this.channel.base(2, this.getMr());
		}
		if (pi == 2) {
			this.setMr("neteisingas operacijos kodas");
			this.channel.base(2, this.getMr());
		}
		if (pi == 3) {
			this.setMr("neteisingas priskyrimas");
			this.channel.base(2, this.getMr());
		}
		if (pi == 4) {
			this.setMr("perpildymas");
			this.channel.base(2, this.getMr());
		}
	}
	/*
	 * Funkcija turi issaugoti buse i ram atminti
	 */
	public void saveState() {
		//pirma issaugome visus registrus tada keiciame masinos busena
		
		this.setMode(1);
	}
	
	/*
	 * FUnkcija grazinanti pries tai buvusia busena ir sunaikinanti tai kas buvo irasyta i ram
	 */
	public void returnState() {
		//pirma pasiemame visus registrus, tada keiciame masinos busena
		
		
		this.setMode(0);
	}
	/*
	 * funkcija sukurianti virtualia maðina
	 */
	public void createVM() {
		//reikia iðsaugoti ankstesnës maðinos darbà
		
		//toliau nusinulikam senuosius duomenis
		this.setCs(0000);
		this.setDs(0000);
		this.setIoi(0000);
		this.setIp(0000);
		this.setMode(1);
		this.setMr("0");
		this.setPi(0000);
		this.setPtr(0000);
		this.setSi(0000);
		this.setSp(0000);
		this.setTi(255);
		this.br = null;
		this.isFirstWord = true;
		this.isStart = false;
		this.isEnd = false;
		this.maxIP = 0;
		
		
	}
	
	//----------------------------------------------------- cia rasau
	// PRISIMINTI: rytoj dadeti LOAD,WRITE komandas; sutvarkyti steko 2 elementu problema; is laptopo perkelti nuskaityma.
	/*public void ADDS(int poslinkis){ // pastaba: steke turi buti bent 2 elementai, kitaip pizdiec... (taisyti ir dokumente)
	   int suma=0;
	   int value1=0;
	   int value2=0;
	   value1=(int) stekas.firstElement();
	   stekas.removeElement(value1);
	   value2=(int) stekas.firstElement();
	   stekas.removeElement(value2);
	   suma=value1+value2;
	   stekas.add(suma);
	}
	
	public void SUBS(int poslinkis){ // pastaba: steke turi buti bent 2 elementai, kitaip pizdiec... (taisyti ir dokumente)
		   int skirtumas=0;
		   int value1=0;
		   int value2=0;
		   value1=(int) stekas.firstElement();
		   stekas.removeElement(value1);
		   value2=(int) stekas.firstElement();
		   stekas.removeElement(value2);
		   skirtumas=value2-value1;
		   stekas.add(skirtumas);
		}
	
	public void MULS(int poslinkis){ // pastaba: steke turi buti bent 2 elementai, kitaip pizdiec... (taisyti ir dokumente)
		   int sandauga=0;
		   int value1=0;
		   int value2=0;
		   value1=(int) stekas.firstElement();
		   stekas.removeElement(value1);
		   value2=(int) stekas.firstElement();
		   stekas.removeElement(value2);
		   sandauga=value2*value1;
		   stekas.add(sandauga);
		}
	
	public void DIVS(int poslinkis){ // pastaba: steke turi buti bent 2 elementai, kitaip pizdiec... (taisyti ir dokumente)
		   int dalmuo=0;
		   int value1=0;
		   int value2=0;
		   value1=(int) stekas.firstElement();
		   stekas.removeElement(value1);
		   value2=(int) stekas.firstElement();
		   stekas.removeElement(value2);
		   dalmuo=value2*value1;
		   stekas.add(dalmuo);
		}
	*/
    public void ADDR(int value1, int value2){
    	int newValue = value1 + value2;
    	this.setMr(Integer.toString(newValue)); 	
	}
    
    public void SUBR(int value1, int value2){
    	int newValue = value1 - value2;
    	this.setMr(Integer.toString(newValue)); 
	}
    
    public void MULR(int value1, int value2){
    	int newValue = value1 * value2;
    	this.setMr(Integer.toString(newValue)); 
	}
    public void DIVR(int value1, int value2){
    	if (value2 == 0) {
    		this.setMr("0E"); 
    	}
    	else {
    		double newValue = value1 / value2;
        	this.setMr(Double.toString(newValue)); 
    	}
	}
    
    public void PUSH(int value1){
    	stekas.add(0,new Integer(value1));
    }
	
    public int POP(){
        int value1;
        value1=(int) stekas.firstElement();
        stekas.removeElement(value1);
        return value1;	
    }
    
    /*public int CMPRS() {
    	   int value1=0;
		   int value2=0;
		   value1=(int) stekas.firstElement();
		   stekas.removeElement(value1);
		   value2=(int) stekas.firstElement();
		   stekas.removeElement(value2);
		   stekas.add(0,new Integer(value2));
		   stekas.add(0,new Integer(value1));
		if (value1 > value2) {
			return 1;
		}
		else if(value1 < value2) {
			return 2;
		}
		else {
			return 0;
		}
	}*/
	//----------------------------------------------------- iki cia
	
	public memory getRAM() {
		return RAM;
	}
	
	public int getPtr() {
		return ptr;
	}

	public void setPtr(int ptr) {
		this.ptr = ptr;
	}

	public String getMr() {
		return mr;
	}

	public void setMr(String mr) {
		this.mr = mr;
	}

	public int getIp() {
		return ip;
	}

	public void setIp(int ip) {
		this.ip = ip;
	}

	public int getCs() {
		return cs;
	}

	public void setCs(int cs) {
		this.cs = cs;
	}

	public int getDs() {
		return ds;
	}

	public void setDs(int ds) {
		this.ds = ds;
	}

	public int getSp() {
		return sp;
	}

	public void setSp(int sp) {
		this.sp = sp;
	}

	public int getSi() {
		return si;
	}

	public void setSi(int si) {
		this.si = si;
	}

	public int getTi() {
		return ti;
	}

	public void setTi(int ti) {
		this.ti = ti;
	}

	public int getIoi() {
		return ioi;
	}

	public void setIoi(int ioi) {
		this.ioi = ioi;
	}

	public int getPi() {
		return pi;
	}

	public void setPi(int pi) {
		this.pi = pi;
	}

	public int getMode() {
		return mode;
	}

	public void setMode(int mode) {
		this.mode = mode;
	}
}
